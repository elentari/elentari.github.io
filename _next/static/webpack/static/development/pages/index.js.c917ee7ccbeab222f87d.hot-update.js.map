{"version":3,"file":"static/webpack/static/development/pages/index.js.c917ee7ccbeab222f87d.hot-update.js","sources":["webpack:///./src/components/three/Avatar.js"],"sourcesContent":["import * as THREE from 'three';\nimport React, { useEffect, useState } from 'react';\nimport { useLoader, useFrame } from 'react-three-fiber';\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader';\n// import { DRACOLoader } from 'three/examples/jsm/loaders/DRACOLoader';\n\nfunction getMousePos(e) {\n  return { x: e.clientX, y: e.clientY };\n}\nfunction moveJoint(mouse, joint, degreeLimit) {\n  let degrees = getMouseDegrees(mouse.x, mouse.y, degreeLimit);\n  joint.rotation.y = THREE.Math.degToRad(degrees.x);\n  joint.rotation.x = THREE.Math.degToRad(degrees.y);\n}\n\nfunction getMouseDegrees(x, y, degreeLimit) {\n  let dx = 0,\n    dy = 0,\n    xdiff,\n    xPercentage,\n    ydiff,\n    yPercentage;\n\n  let w = { x: window.innerWidth, y: window.innerHeight };\n\n  // Left (Rotates neck left between 0 and -degreeLimit)\n\n  // 1. If cursor is in the left half of screen\n  if (x <= w.x / 2) {\n    // 2. Get the difference between middle of screen and cursor position\n    xdiff = w.x / 2 - x;\n    // 3. Find the percentage of that difference (percentage toward edge of screen)\n    xPercentage = (xdiff / (w.x / 2)) * 100;\n    // 4. Convert that to a percentage of the maximum rotation we allow for the neck\n    dx = ((degreeLimit * xPercentage) / 100) * -1;\n  }\n  // Right (Rotates neck right between 0 and degreeLimit)\n  if (x >= w.x / 2) {\n    xdiff = x - w.x / 2;\n    xPercentage = (xdiff / (w.x / 2)) * 100;\n    dx = (degreeLimit * xPercentage) / 100;\n  }\n  // Up (Rotates neck up between 0 and -degreeLimit)\n  if (y <= w.y / 2) {\n    ydiff = w.y / 2 - y;\n    yPercentage = (ydiff / (w.y / 2)) * 100;\n    // Note that I cut degreeLimit in half when she looks up\n    dy = ((degreeLimit * 0.5 * yPercentage) / 100) * -1;\n  }\n\n  // Down (Rotates neck down between 0 and degreeLimit)\n  if (y >= w.y / 2) {\n    ydiff = y - w.y / 2;\n    yPercentage = (ydiff / (w.y / 2)) * 100;\n    dy = (degreeLimit * yPercentage) / 100;\n  }\n  return { x: dx, y: dy };\n}\n\nexport function Avatar({ url }) {\n  const gltf = useLoader(GLTFLoader, url);\n  const [mixer] = useState(() => new THREE.AnimationMixer());\n  useFrame((state, delta) => mixer.update(delta));\n\n  const { scene, animations } = gltf;\n\n  useEffect(() => {\n    let neck;\n    let waist;\n\n    scene.traverse(object => {\n      if (object.isBone && object.name === 'arissaNeck') {\n        neck = object;\n      }\n      if (object.isBone && object.name === 'arissaSpine') {\n        waist = object;\n      }\n      if (object.isMesh) {\n        object.castShadow = true;\n        object.receiveShadow = true;\n      }\n    });\n\n    scene.scale.set(7, 7, 7);\n    scene.position.y = -11;\n\n    let idleAnimationClip = THREE.AnimationClip.findByName(animations, 'idle');\n\n    idleAnimationClip.tracks.splice(3, 3);\n    idleAnimationClip.tracks.splice(9, 3);\n\n    let animationAction = mixer.clipAction(idleAnimationClip, scene);\n    animationAction.play();\n\n    document.addEventListener('mousemove', function(e) {\n      var mousecoords = getMousePos(e);\n      console.log(mousecoords);\n    });\n\n    return () => mixer.uncacheClip(idleAnimationClip);\n  }, [scene, animations]);\n\n  return <primitive object={gltf.scene} />;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AAFA;AAEA;AAAA;AAFA;AACA;AAEA;AAAA;AAAA;AAHA;AAAA;AAOA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;;;;A","sourceRoot":""}